What happens when you initialize a repository? Why do you need to do it?

It creates a hidden .git folder that keeps track of all the commits

How is the staging area different from the working directory and the repository. What value do you think it offers?

Working directory is the directory in our file system where all the files we are working with are stored. We might want to put these files in a git repository which we initialized. It is possible that we might want to put only some of these files into the git repository for one or more reasons. one of the reasons are that we might want to commit two files together and one file separately because they might be of different logical meanings. To do that we need an intermediate area to do these commits. This intermediate area is staging area where we put the files we need to commit by using "git add" command.



STANDARD GIT Practice is to ADD COMMIT MESSAGES as if they are commands...for instance instead of using "added this thing into my code", use "Add this". like a command description. 
i

"git diff"

shows the difference between working directory and staging area


"git diff --staged"

shows the diference between the staging area and the repository


git reset --hard

removes any changes in the working directory or the staging area

How can you use the staging area to make sure you have one commit per logical change.

- we can do thus by only adding files to the staging area if they are ready to be committed.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

In situations where developer needs to try out fixing a bug, he can leave the code that is running unchanged and test out his changes to fix the bug in a new branch.
We can take multiple routes or multiple approaches and test them out in different branches.

How do the diagrams help you visualize the branch structure?

Divergence represents more branches. Convergence represents fewer branches. 

Combining two branches:
git merge branch1 branch2

Delete branch - Deletes the label not the commits
git branch -d branchname


Create branch
git branch -b branchname 

OR

git branch branchname
git checkout branchname 

MERGING creates a new commit. Therefore if two commit points are merged then a new commit is created which points to both these points.

